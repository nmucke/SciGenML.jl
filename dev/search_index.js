var documenterSearchIndex = {"docs":
[{"location":"#SciGenML","page":"Home","title":"SciGenML","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SciGenML.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#SciGenML.Models.ConditionalFlowMatching","page":"Home","title":"SciGenML.Models.ConditionalFlowMatching","text":"ConditionalFlowMatching\n\nA conditional flow matching generative model.\n\nThe conditional flow matching generative model is a generative model that uses a flow matching approach to generate data.\n\nIt is a special case of the conditional stochastic interpolant generative model where there is no noise in the interpolant.\n\n\n\n\n\n","category":"type"},{"location":"#SciGenML.Models.ConditionalGenerativeModel","page":"Home","title":"SciGenML.Models.ConditionalGenerativeModel","text":"Abstract type for all conditional generative models.\n\n\n\n\n\n","category":"type"},{"location":"#SciGenML.Models.DeterministicInterpolantCoefs","page":"Home","title":"SciGenML.Models.DeterministicInterpolantCoefs","text":"DeterministicInterpolantCoefs\n\nA struct that contains the alpha and beta function coefficients and their derivatives.\n\nThe interpolant is defined as:\nx(t) = α(t) * x0 + β(t) * x1\n\nThe derivatives are:\ndx/dt = α'(t) * x0 + β'(t) * x1\n\n\n\n\n\n","category":"type"},{"location":"#SciGenML.Models.FlowMatching","page":"Home","title":"SciGenML.Models.FlowMatching","text":"FlowMatching\n\nA flow matching generative model.\n\nThe flow matching generative model is a generative model that uses a flow matching approach to generate data.\n\nIt is a special case of the stochastic interpolant generative model where there is no noise in the interpolant.\n\n\n\n\n\n","category":"type"},{"location":"#SciGenML.Models.FollmerStochasticInterpolant","page":"Home","title":"SciGenML.Models.FollmerStochasticInterpolant","text":"FollmerStochasticInterpolant\n\nA follmer stochastic interpolant generative model.\n\n\n\n\n\n","category":"type"},{"location":"#SciGenML.Models.GenerativeModel","page":"Home","title":"SciGenML.Models.GenerativeModel","text":"Abstract type for all generative models.\n\n\n\n\n\n","category":"type"},{"location":"#SciGenML.Models.ScoreBasedDiffusionModel","page":"Home","title":"SciGenML.Models.ScoreBasedDiffusionModel","text":"ScoreBasedDiffusionModel\n\nA score-based diffusion model generative model.\n\nThe score-based diffusion model generative model is a generative model that uses a score-based diffusion model approach to generate data.\n\nIt is a special case of the stochastic interpolant generative model where there is no noise in the interpolant.\n\n\n\n\n\n","category":"type"},{"location":"#SciGenML.Models.StochasticInterpolant","page":"Home","title":"SciGenML.Models.StochasticInterpolant","text":"StochasticInterpolant\n\nA stochastic interpolant generative model.\n\n\n\n\n\n","category":"type"},{"location":"#SciGenML.Models.StochasticInterpolantCoefs","page":"Home","title":"SciGenML.Models.StochasticInterpolantCoefs","text":"StochasticInterpolantCoefs\n\nA struct that contains the alpha and beta function coefficients and their derivatives.\n\nThe interpolant is defined as:\nx(t) = α(t) * x0 + β(t) * x1 + γ(t) * Z\n\nThe derivatives are:\ndx/dt = α'(t) * x0 + β'(t) * x1 + γ'(t) * Z\n\n\n\n\n\n","category":"type"},{"location":"#SciGenML.Models.compute_interpolant-Tuple{Any, Any, Any, Any, SciGenML.Models.StochasticInterpolantCoefs}","page":"Home","title":"SciGenML.Models.compute_interpolant","text":"compute_interpolant(x0, x1, z, t, interpolant_coefs::StochasticInterpolantCoefs)\n\nComputes the stochastic interpolant at a given time.\n\nArgs:\n    x0: The starting point.\n    x1: The ending point.\n    z: The noise.\n    t: The time.\n    interpolant_coefs: The interpolant coefficients.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Models.compute_interpolant-Tuple{Any, Any, Any, SciGenML.Models.DeterministicInterpolantCoefs}","page":"Home","title":"SciGenML.Models.compute_interpolant","text":"Computes the deterministic interpolant at a given time.\n\nArgs:\n    x0: The starting point.\n    x1: The ending point.\n    t: The time.\n    interpolant_coefs: The interpolant coefficients.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Models.compute_interpolant_diff-Tuple{Any, Any, Any, SciGenML.Models.DeterministicInterpolantCoefs}","page":"Home","title":"SciGenML.Models.compute_interpolant_diff","text":"compute_interpolant_diff\n\nComputes the derivative of the interpolant at a given time.\n\nArgs:\n    x0: The starting point.\n    x1: The ending point.\n    interpolant_coefs: The interpolant coefficients.\n    t: The time.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Models.diffusion_interpolant_coefs","page":"Home","title":"SciGenML.Models.diffusion_interpolant_coefs","text":"diffusion_interpolant_coefs(trait::Models.Deterministic)\n\nReturns the quadratic interpolant.\n\nThe quadratic interpolant is defined as:\nα(t) = exp(-multiplier * t)\nβ(t) = sqrt(1 - exp(-2 * multiplier * t))\n\nThe derivatives are:\nα'(t) = -multiplier * exp(-multiplier * t)\nβ'(t) = multiplier * exp(-multiplier * t) / sqrt(1 - exp(-2 * multiplier * t))\n\n\n\n\n\n","category":"function"},{"location":"#SciGenML.Models.drift_term","page":"Home","title":"SciGenML.Models.drift_term","text":"drift_term(\n    model::FollmerGenerativeModel, \n)\n\nCompute the drift term for a stochsatic interpolant.\n\n\n\n\n\n","category":"function"},{"location":"#SciGenML.Models.drift_term-Tuple{SciGenML.Models.ConditionalFlowMatching}","page":"Home","title":"SciGenML.Models.drift_term","text":"drift_term(\n    ::Models.Stochastic,\n    model::Models.ConditionalFlowMatching,\n)\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Models.drift_term-Tuple{SciGenML.Models.Deterministic, SciGenML.Models.ConditionalFlowMatching}","page":"Home","title":"SciGenML.Models.drift_term","text":"drift_term(\n    ::Models.Deterministic,\n    model::Models.ConditionalFlowMatching,\n)\n\nGet the drift term for the conditional flow matching generative model.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Models.drift_term-Tuple{SciGenML.Models.FollmerStochasticInterpolant, Function}","page":"Home","title":"SciGenML.Models.drift_term","text":"drift_term(\n    model::FollmerGenerativeModel, \n    diffusion_fn\n)\n\nCompute the drift term for a stochsatic interpolant.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Models.drift_term-Tuple{SciGenML.Models.Stochastic, SciGenML.Models.ScoreBasedDiffusionModel, Any}","page":"Home","title":"SciGenML.Models.drift_term","text":"drift_term(\n    ::Models.Stochastic,\n    model::StochasticInterpolant, \n    diffusion_fn, \n)\n\nCompute the drift term for a stochsatic interpolant.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Models.drift_term-Tuple{SciGenML.Models.Stochastic, SciGenML.Models.StochasticInterpolant, Any}","page":"Home","title":"SciGenML.Models.drift_term","text":"drift_term(\n    ::Models.Stochastic,\n    model::StochasticInterpolant, \n    diffusion_fn, \n)\n\nCompute the drift term for a stochsatic interpolant.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Models.drift_term-Tuple{SciGenML.Models.StochasticInterpolant, Any}","page":"Home","title":"SciGenML.Models.drift_term","text":"drift_term(\n    ::Models.Stochastic,\n    model::StochasticInterpolant, \n    diffusion_fn, \n    x, \n    ps, \n    st\n)\n\nCompute the drift term for a stochastic interpolant.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Models.get_interpolant_coefs-Tuple{Union{SciGenML.Models.Deterministic, SciGenML.Models.Stochastic}, String}","page":"Home","title":"SciGenML.Models.get_interpolant_coefs","text":"get_interpolant_coefs(type::String)\n\nGet the interpolant coefficients for a given type. \nSupported types are:\n- \"linear\"\n- \"quadratic\"\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Models.linear_interpolant_coefs","page":"Home","title":"SciGenML.Models.linear_interpolant_coefs","text":"linear_interpolant_coefs(trait::Models.Deterministic)\n\nReturns the linear interpolant.\n\nThe linear interpolant is defined as:\nα(t) = 1 - t\nβ(t) = t\nγ(t) = 1 - t, if trait == Models.Stochastic\n\nThe derivatives are:\nα'(t) = -1\nβ'(t) = 1\nγ'(t) = -1, if trait == Models.Stochastic\n\n\n\n\n\n","category":"function"},{"location":"#SciGenML.Models.posterior_drift_term-Tuple{SciGenML.Models.FollmerStochasticInterpolant, Any, Function, Function}","page":"Home","title":"SciGenML.Models.posterior_drift_term","text":"posterior_drift_term(\n    model::FollmerGenerativeModel, \n    diffusion_fn\n)\n\nCompute the drift term for a stochsatic interpolant.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Models.quadratic_interpolant_coefs","page":"Home","title":"SciGenML.Models.quadratic_interpolant_coefs","text":"quadratic_interpolant_coefs(trait::Models.Deterministic)\n\nReturns the quadratic interpolant.\n\nThe quadratic interpolant is defined as:\nα(t) = 1 - t\nβ(t) = t^2\nγ(t) = 1 - t, if trait == Models.Stochastic\n\nThe derivatives are:\nα'(t) = -1\nβ'(t) = 2t\nγ'(t) = -1, if trait == Models.Stochastic\n\n\n\n\n\n","category":"function"},{"location":"#SciGenML.Preprocessing.MinMaxScaler","page":"Home","title":"SciGenML.Preprocessing.MinMaxScaler","text":"MinMaxScaler\n\nA min-max scaler for data.\n\n\n\n\n\n","category":"type"},{"location":"#SciGenML.Preprocessing.Preprocessor","page":"Home","title":"SciGenML.Preprocessing.Preprocessor","text":"Preprocessor\n\nA preprocessor for data.\n\n\n\n\n\n","category":"type"},{"location":"#SciGenML.Preprocessing.StandardScaler","page":"Home","title":"SciGenML.Preprocessing.StandardScaler","text":"StandardScaler\n\nA scaler for data.\n\n\n\n\n\n","category":"type"},{"location":"#SciGenML.Preprocessing.get_dims_to_reduce","page":"Home","title":"SciGenML.Preprocessing.get_dims_to_reduce","text":"get_dims_to_reduce(data)\n\nGet the dimensions to reduce from the data. Outputs a tuple of dimensions to reduce.\n\n\n\n\n\n","category":"function"},{"location":"#SciGenML.Preprocessing.min_max_scaler_inverse_transform-Tuple{Any, Any, Any}","page":"Home","title":"SciGenML.Preprocessing.min_max_scaler_inverse_transform","text":"min_max_scaler_inverse_transform(\n    data,\n    min_val::Float32,\n    max_val::Float32\n)\n\nInverse transform for the min-max scaler.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Preprocessing.min_max_scaler_transform-Tuple{Any, Any, Any}","page":"Home","title":"SciGenML.Preprocessing.min_max_scaler_transform","text":"min_max_scaler_transform(\n    data,\n    min_val::Float32,\n    max_val::Float32\n)\n\nA scaler for data.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Preprocessing.reshape_scalar-Tuple{Any, Any}","page":"Home","title":"SciGenML.Preprocessing.reshape_scalar","text":"reshape_scalar(scalar, new_dims)\n\nReshape a scalar to a new dimension.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Preprocessing.standard_scaler_inverse_transform-Tuple{Any, Any, Any}","page":"Home","title":"SciGenML.Preprocessing.standard_scaler_inverse_transform","text":"standard_scaler_inverse_transform(\n    data,\n    mean,\n    std\n)\n\nInverse transform for the standard scaler.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Preprocessing.standard_scaler_transform-Tuple{Any, Any, Any}","page":"Home","title":"SciGenML.Preprocessing.standard_scaler_transform","text":"standard_scaler_transform(\n    data,\n    mean,\n    std\n)\n\nA scaler for data.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Architectures.DenseNeuralNetwork-Tuple{Tuple, Int64, Vector{Int64}}","page":"Home","title":"SciGenML.Architectures.DenseNeuralNetwork","text":"DenseNN(\n    in_features::Tuple,\n    out_features::Int, \n    hidden_features::Vector{Int};\n    activation_function = DEFAULT_ACTIVATION_FUNCTION,\n    dropout = DEFAULT_DROPOUT\n)\n\nin_features: A tuple of the number of input features\nout_features: The number of output features.\nhidden_features: The number of hidden features.\nactivation_function: The activation function.\n\nA dense neural network with `in_features` input features, \n`out_features` output features, and `hidden_features` hidden features.\nThe input is a tuple that are concatenated to form a single input.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Architectures.UNet-Tuple{Int64, Int64, Any, Int64, Int64, Int64, String}","page":"Home","title":"SciGenML.Architectures.UNet","text":"UNet(\n    in_channels::Int,\n    out_channels::Int,\n    hidden_channels,\n    time_embedding_dim::Int\n    padding::String,\n)\n\nA UNet model.\n\n# Arguments\n- `in_channels::Int`: The number of input channels.\n- `out_channels::Int`: The number of output channels.\n- `hidden_channels::List{Int}`: The number of hidden channels in each layer.\n- `time_embedding_dim::Int`: The dimension of the time embedding.\n- `scalar_in_conditioning_dim::Int`: The dimension of the scalar input conditioning.\n- `scalar_hidden_conditioning_dim::Int`: The dimension of the hidden scalar conditioning.\n- `padding::String`: The padding type.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Architectures.UNet-Tuple{Int64, Int64, Any, Int64, String, Int64, Int64, String}","page":"Home","title":"SciGenML.Architectures.UNet","text":"UNet(\n    in_channels::Int,\n    out_channels::Int,\n    hidden_channels,\n    time_embedding_dim::Int\n    padding::String,\n)\n\nA UNet model.\n\n# Arguments\n- `in_channels::Int`: The number of input channels.\n- `out_channels::Int`: The number of output channels.\n- `hidden_channels::List{Int}`: The number of hidden channels in each layer.\n- `time_embedding_dim::Int`: The dimension of the time embedding.\n- `padding::String`: The padding type.\n- `field_in_conditioning_dim::Int`: The dimension of the field input conditioning.\n- `field_hidden_conditioning_dim::Int`: The dimension of the hidden field conditioning.\n- `field_conditioning_combination::String`: The combination method for the field conditioning.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Architectures.UNet-Tuple{Int64, Int64, Any, Int64, String}","page":"Home","title":"SciGenML.Architectures.UNet","text":"UNet(\n    in_channels::Int,\n    out_channels::Int,\n    hidden_channels,\n    time_embedding_dim::Int\n    padding::String,\n)\n\nA UNet model.\n\n# Arguments\n- `in_channels::Int`: The number of input channels.\n- `out_channels::Int`: The number of output channels.\n- `hidden_channels::List{Int}`: The number of hidden channels in each layer.\n- `time_embedding_dim::Int`: The dimension of the time embedding.\n- `padding::String`: The padding type.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Architectures.UNet-Tuple{SciGenML.Config.UNetHyperparameters}","page":"Home","title":"SciGenML.Architectures.UNet","text":"UNet(config::Config.UNetHyperparameters)\n\nA UNet model.\n\n# Arguments\n- `config::Config.UNetHyperparameters`: The configuration for the UNet model.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Architectures.get_model-Tuple{}","page":"Home","title":"SciGenML.Architectures.get_model","text":"get_model(\n    in_features,\n    out_features,\n    hidden_features,\n    activation_function = DEFAULT_ACTIVATION_FUNCTION,\n    dropout = DEFAULT_DROPOUT\n)\n\nin_features: The number of input features.\nout_features: The number of output features.\nhidden_features: The number of hidden features.\nactivation_function: The activation function.\ndropout: The dropout rate.\n\nReturns a model that can be used to predict the output from the input.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Layers.conv_next_block-Tuple{}","page":"Home","title":"SciGenML.Layers.conv_next_block","text":"conv_next_block(\n    in_channels::Int, \n    out_channels::Int,\n    multiplier::Int = 1,\n    pars_embed_dim::Int = 1,\n    imsize::Tuple{Int, Int} = (64, 128)\n)\n\nCreate a conv next block with the given number of input and output channels.  The block consists of two convolutional layers with kernel size kernel_size. The first layer has the same number of input and output channels, while the  second layer has the same number of output channels as the block.  The block also includes batch normalization and a skip connection.\n\nhttps://arxiv.org/abs/2201.03545\n\nBased on https://github.com/tum-pbs/autoreg-pde-diffusion/blob/b9b33913b99ede88d9452c5ab470c5d7f5da5c56/src/turbpred/modeldiffusionblocks.py#L60\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Layers.conv_next_block_no_conditioning-Tuple{}","page":"Home","title":"SciGenML.Layers.conv_next_block_no_conditioning","text":"conv_next_block_no_conditioning(\n    in_channels::Int, \n    out_channels::Int,\n    multiplier::Int = 1,\n    imsize::Tuple{Int, Int} = (64, 128)\n)\n\nCreate a conv next block with the given number of input and output channels.  The block consists of two convolutional layers with kernel size kernel_size. The first layer has the same number of input and output channels, while the  second layer has the same number of output channels as the block.  The block also includes batch normalization and a skip connection.\n\nhttps://arxiv.org/abs/2201.03545\n\nBased on https://github.com/tum-pbs/autoreg-pde-diffusion/blob/b9b33913b99ede88d9452c5ab470c5d7f5da5c56/src/turbpred/modeldiffusionblocks.py#L60\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Layers.get_padding-Tuple{String, Int64}","page":"Home","title":"SciGenML.Layers.get_padding","text":"get_padding(padding::String, padding_size::Int)\n\nGet the padding function for the given padding type and size.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Layers.multiple_conv_next_blocks-Tuple{}","page":"Home","title":"SciGenML.Layers.multiple_conv_next_blocks","text":"multiple_conv_next_blocks(\n    in_channels::Int, \n    out_channels::Int,\n    multiplier::Int = 1,\n    conditioning_dim::Int = 1,\n    imsize::Tuple{Int, Int} = (64, 128)\n)\n\nCreate a chain of two conv next blocks with the given number of input and output channels. The first block has the same number of input and output\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Layers.multiple_conv_next_blocks_no_conditioning-Tuple{}","page":"Home","title":"SciGenML.Layers.multiple_conv_next_blocks_no_conditioning","text":"multiple_conv_next_blocks_no_conditioning(\n    in_channels::Int, \n    out_channels::Int,\n    multiplier::Int = 1,\n    padding=\"constant\"\n)\n\nCreate a chain of two conv next blocks with the given number of input and output channels. The first block has the same number of input and output\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Layers.sinusoidal_embedding","page":"Home","title":"SciGenML.Layers.sinusoidal_embedding","text":"sinusoidal_embedding(\n    x::AbstractArray{AbstractFloat, 4},\n    min_freq::AbstractFloat,\n    max_freq::AbstractFloat,\n    embedding_dims::Int\n)\n\nEmbed the noise variances to a sinusoidal embedding with the given frequency range and embedding dimensions.\n\nBased on https://yng87.page/en/blog/2022/lux-ddim/.\n\n\n\n\n\n","category":"function"},{"location":"#SciGenML.TimeIntegrators.RK4_step-NTuple{6, Any}","page":"Home","title":"SciGenML.TimeIntegrators.RK4_step","text":"RK4_step(rhs, x, t, dt, ps, st)\n\nPerform a 4th order Runge-Kutta step.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.TimeIntegrators.RK4_step-NTuple{7, Any}","page":"Home","title":"SciGenML.TimeIntegrators.RK4_step","text":"RK4_step(rhs, x, conditioning, t, dt, ps, st)\n\nPerform a 4th order Runge-Kutta step.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.TimeIntegrators.euler_maruyama_step-NTuple{7, Any}","page":"Home","title":"SciGenML.TimeIntegrators.euler_maruyama_step","text":"Euler Maruyama step for SDEs.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.TimeIntegrators.euler_maruyama_step-NTuple{8, Any}","page":"Home","title":"SciGenML.TimeIntegrators.euler_maruyama_step","text":"Euler Maruyama step for SDEs.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.TimeIntegrators.forward_euler_step-NTuple{6, Any}","page":"Home","title":"SciGenML.TimeIntegrators.forward_euler_step","text":"forward_euler_step(model, x, t, dt)\n\nPerform a forward Euler step.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.TimeIntegrators.forward_euler_step-NTuple{7, Any}","page":"Home","title":"SciGenML.TimeIntegrators.forward_euler_step","text":"forward_euler_step(model, x, scalar_conditioning, t, dt)\n\nPerform a forward Euler step.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.TimeIntegrators.heun_step-NTuple{7, Any}","page":"Home","title":"SciGenML.TimeIntegrators.heun_step","text":"Heun step for SDEs.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.TimeIntegrators.heun_step-NTuple{8, Any}","page":"Home","title":"SciGenML.TimeIntegrators.heun_step","text":"Heun step for SDEs.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.TimeIntegrators.ode_integrator-NTuple{6, Any}","page":"Home","title":"SciGenML.TimeIntegrators.ode_integrator","text":"ode_integrator(\n    stepper, \n    rhs, \n    x, \n    num_steps, \n    ps, \n    st;\n    t_interval=[0.0, 1.0], \n    verbose::Bool = true\n)\n\nGeneric ODE integrator.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.TimeIntegrators.ode_integrator-NTuple{7, Any}","page":"Home","title":"SciGenML.TimeIntegrators.ode_integrator","text":"ode_integrator(\n    stepper, \n    rhs, \n    x, \n    scalar_conditioning,\n    num_steps, \n    ps, \n    st;\n    t_interval=[0.0, 1.0], \n    verbose::Bool = true\n)\n\nGeneric ODE integrator.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Data.load_and_reshape_data-Tuple{Any, Any, Any}","page":"Home","title":"SciGenML.Data.load_and_reshape_data","text":"load_and_reshape_data(\n    num_steps,\n    num_skip_steps,\n    i\n)\n\nLoads the KNMI data for the given number of steps.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Data.load_knmi_data-Tuple{SciGenML.Config.KNMIDataHyperparameters}","page":"Home","title":"SciGenML.Data.load_knmi_data","text":"load_knmi_data(\n    config::Config.KNMIDataHyperparameters;\n    kwargs...\n)\n\nLoads the KNMI data for the given configuration.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Data.load_knmi_test_data-Tuple{Any, Any, Any}","page":"Home","title":"SciGenML.Data.load_knmi_test_data","text":"load_knmi_test_data(\n    num_steps,\n    trajectories,\n    num_skip_steps\n)\n\nLoads the KNMI test data for the given number of steps.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Data.load_knmi_tranining_data-Tuple{Any, Any, Any}","page":"Home","title":"SciGenML.Data.load_knmi_tranining_data","text":"load_knmi_data(\n    num_steps\n)\n\nLoads the KNMI data for the given number of steps.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Data.load_kolmogorov_data","page":"Home","title":"SciGenML.Data.load_kolmogorov_data","text":"load_kolmogorov_data(;\n    num_trajectories = 5,\n    num_skip_steps = 5,\n    num_steps = 100,\n    start_step = 500\n)\nLoad the Kolmogorov data.\n\nOutputs a named tuple with the following fields:\n- `base`: The base data. [H, W, C, (T-1)*N]\n- `target`: The target data. [H, W, C, (T-1)*N]\n- `field_conditioning`: The field conditioning data. [H, W, C, (T-1)*N]\n\n\n\n\n\n","category":"function"},{"location":"#SciGenML.Data.load_super_res_kolmogorov_data","page":"Home","title":"SciGenML.Data.load_super_res_kolmogorov_data","text":"load_super_res_kolmogorov_data(;\n    num_trajectories = 5,\n    num_skip_steps = 5,\n    num_steps = 100,\n    start_step = 500\n)\nLoad the super-resolution Kolmogorov data.\n\nOutputs a named tuple with the following fields:\n- `base`: The base data. [H, W, C, (T-1)*N]\n- `target`: The target data. [H, W, C, (T-1)*N]\n- `field_conditioning`: The field conditioning data. [H, W, C, (T-1)*N]\n\n\n\n\n\n","category":"function"},{"location":"#SciGenML.Sampling.sample-Tuple{Any, Vararg{Any}}","page":"Home","title":"SciGenML.Sampling.sample","text":"sample(\n    model,\n    args...; \n    kwargs...\n)\n\nGeneric training function for all models.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Sampling.sample-Tuple{SciGenML.Models.Deterministic, SciGenML.Models.FlowMatching, Any, Int64}","page":"Home","title":"SciGenML.Sampling.sample","text":"sample(\n    ::Models.Deterministic,\n    model::Models.FlowMatching,\n    num_samples::Int,\n    num_steps::Int,\n    rng::Random.AbstractRNG = Random.default_rng()\n)\n\nSample from a stochastic interpolant generative model using the forward Euler method.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Sampling.sample-Tuple{SciGenML.Models.Deterministic, SciGenML.Models.FlowMatching, Int64}","page":"Home","title":"SciGenML.Sampling.sample","text":"sample(\n    ::Models.Deterministic,\n    model::Models.FlowMatching,\n    num_samples::Int,\n    num_steps::Int,\n    rng::Random.AbstractRNG = Random.default_rng()\n)\n\nSample from a stochastic interpolant generative model using the forward Euler method.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Sampling.sample-Tuple{SciGenML.Models.Deterministic, SciGenML.Models.ScoreBasedDiffusionModel, Int64}","page":"Home","title":"SciGenML.Sampling.sample","text":"sample(\n    ::Models.Deterministic,\n    model::Models.ScoreBasedDiffusionModel,\n    num_samples::Int,\n    num_steps::Int,\n    rng::Random.AbstractRNG = Random.default_rng()\n)\n\nSample from a denoising diffusion model using the forward Euler method.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Sampling.sample-Tuple{SciGenML.Models.Deterministic, SciGenML.Models.StochasticInterpolant, Int64}","page":"Home","title":"SciGenML.Sampling.sample","text":"sample(\n    ::Models.Deterministic,\n    model::Models.StochasticInterpolantGenerativeModel,\n    num_samples::Int,\n    num_steps::Int,\n    rng::Random.AbstractRNG = Random.default_rng()\n)\n\nSample from a stochastic interpolant generative model using the forward Euler method.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Sampling.sample-Tuple{SciGenML.Models.Stochastic, SciGenML.Models.FollmerStochasticInterpolant, Any, Int64}","page":"Home","title":"SciGenML.Sampling.sample","text":"sample(\n    ::Models.Stochastic,\n    model::Models.FollmerStochasticInterpolant,\n    scalar_conditioning,\n    num_steps::Int,\n    num_samples::Int,\n    prior_samples = nothing,\n    diffusion_fn = nothing,\n    rng::Random.AbstractRNG = Random.default_rng(),\n    verbose::Bool = true,\n    stepper = TimeIntegrators.heun_step\n)\n\nSample from a stochastic interpolant generative model using the forward Euler method.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Sampling.sample-Tuple{SciGenML.Models.Stochastic, SciGenML.Models.ScoreBasedDiffusionModel, Any, Int64}","page":"Home","title":"SciGenML.Sampling.sample","text":"sample(\n    ::Models.Stochastic,\n    model::Models.ScoreBasedDiffusionModel,\n    num_samples::Int,\n    num_steps::Int,\n    rng::Random.AbstractRNG = Random.default_rng()\n)\n\nSample from a denoising diffusion model using the forward Euler method.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Sampling.sample-Tuple{SciGenML.Models.Stochastic, SciGenML.Models.ScoreBasedDiffusionModel, Int64}","page":"Home","title":"SciGenML.Sampling.sample","text":"sample(\n    ::Models.Stochastic,\n    model::Models.ScoreBasedDiffusionModel,\n    num_samples::Int,\n    num_steps::Int,\n    num_samples::Int,\n    prior_samples,\n    diffusion_fn,\n    rng::Random.AbstractRNG = Random.default_rng(),\n    verbose::Bool = true,\n    stepper = TimeIntegrators.heun_step\n)\n\nSample from a denoising diffusion model using the forward Euler method.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Sampling.sample-Tuple{SciGenML.Models.Stochastic, SciGenML.Models.StochasticInterpolant, Any, Int64}","page":"Home","title":"SciGenML.Sampling.sample","text":"sample(\n    ::Models.Stochastic,\n    model::Models.StochasticInterpolant,\n    scalar_conditioning,\n    num_steps::Int,\n    num_samples::Int,\n    prior_samples = nothing,\n    diffusion_fn = nothing,\n    rng::Random.AbstractRNG = Random.default_rng(),\n    verbose::Bool = true,\n    stepper = TimeIntegrators.heun_step\n)\n\nSample from a stochastic interpolant generative model using the forward Euler method.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Sampling.sample-Tuple{SciGenML.Models.Stochastic, SciGenML.Models.StochasticInterpolant, Int64}","page":"Home","title":"SciGenML.Sampling.sample","text":"sample(\n    ::Models.Stochastic,\n    model::Models.StochasticInterpolantGenerativeModel,\n    num_samples::Int,\n    num_steps::Int,\n    rng::Random.AbstractRNG = Random.default_rng()\n)\n\nSample from a stochastic interpolant generative model using the forward Euler method.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Training.Checkpoint","page":"Home","title":"SciGenML.Training.Checkpoint","text":"Checkpoint\n\nA checkpoint for a model and other data.\n\n\n\n\n\n","category":"type"},{"location":"#SciGenML.Training._train_step-Tuple{SciGenML.Models.Deterministic, SciGenML.Models.ConditionalFlowMatching, Vararg{Any, 5}}","page":"Home","title":"SciGenML.Training._train_step","text":"_train_step(\n    ::Models.Deterministic,\n    model::Models.ConditionalFlowMatching,\n    base_samples,\n    target_samples,\n    scalar_conditioning_samples,\n    train_state,\n    rng\n)\n\nTrain a stochastic interpolant generative model for one step.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Training._train_step-Tuple{SciGenML.Models.Deterministic, SciGenML.Models.FlowMatching, Vararg{Any, 4}}","page":"Home","title":"SciGenML.Training._train_step","text":"_train_step(\n    ::Models.Deterministic,\n    model::Models.FlowMatching,\n    base_samples,\n    target_samples,\n    train_state,\n    rng\n)\n\nTrain a flow matching generative model for one step.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Training._train_step-Tuple{SciGenML.Models.Deterministic, SciGenML.Models.FlowMatching, Vararg{Any, 5}}","page":"Home","title":"SciGenML.Training._train_step","text":"_train_step(\n    ::Models.Deterministic,\n    model::Models.FlowMatching,\n    base_samples,\n    target_samples,\n    field_conditioning,\n    train_state,\n    rng\n)\n\nTrain a flow matching generative model for one step.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Training._train_step-Tuple{SciGenML.Models.Deterministic, SciGenML.Models.StochasticInterpolant, Vararg{Any, 4}}","page":"Home","title":"SciGenML.Training._train_step","text":"_train_step(\n    ::Models.Deterministic,\n    model::Models.StochasticInterpolant,\n    base_samples,\n    target_samples,\n    train_state,\n    rng\n)\n\nTrain a stochastic interpolant generative model for one step.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Training._train_step-Tuple{SciGenML.Models.ScoreBasedDiffusionModel, Vararg{Any, 4}}","page":"Home","title":"SciGenML.Training._train_step","text":"_train_step(\n    ::Models.Deterministic,\n    model::Models.ScoreBasedDiffusionModel,\n    base_samples,\n    target_samples,\n    train_state,\n    rng\n)\n\nTrain a score-based diffusion generative model for one step via flow matching.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Training._train_step-Tuple{SciGenML.Models.ScoreBasedDiffusionModel, Vararg{Any, 5}}","page":"Home","title":"SciGenML.Training._train_step","text":"_train_step(\n    ::Models.Deterministic,\n    model::Models.ScoreBasedDiffusionModel,\n    base_samples,\n    target_samples,\n    conditioning,\n    train_state,\n    rng\n)\n\nTrain a score-based diffusion generative model for one step via flow matching.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Training._train_step-Tuple{SciGenML.Models.Stochastic, SciGenML.Models.FollmerStochasticInterpolant, Vararg{Any, 5}}","page":"Home","title":"SciGenML.Training._train_step","text":"_train_step(\n    ::Models.Stochastic,\n    model::Models.FollmerStochasticInterpolant,\n    base_samples,\n    target_samples,\n    field_conditioning,\n    train_state,\n    rng\n)\n\nTrain a stochastic interpolant generative model for one step.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Training._train_step-Tuple{SciGenML.Models.Stochastic, SciGenML.Models.StochasticInterpolant, Vararg{Any, 4}}","page":"Home","title":"SciGenML.Training._train_step","text":"_train_step(\n    ::Models.Stochastic,\n    model::Models.StochasticInterpolant,\n    base_samples,\n    target_samples,\n    train_state,\n    rng\n)\n\nTrain a stochastic interpolant generative model for one step.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Training._train_step-Tuple{SciGenML.Models.Stochastic, SciGenML.Models.StochasticInterpolant, Vararg{Any, 5}}","page":"Home","title":"SciGenML.Training._train_step","text":"_train_step(\n    ::Models.Stochastic,\n    model::Models.StochasticInterpolant,\n    base_samples,\n    target_samples,\n    scalar_conditioning,\n    train_state,\n    rng\n)\n\nTrain a stochastic interpolant generative model for one step.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Training.compute_score_loss-NTuple{4, Any}","page":"Home","title":"SciGenML.Training.compute_score_loss","text":"compute_score_loss(model, ps, st, (x, z, gamma))\n\nCompute the loss for a stochastic interpolant generative model.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Training.compute_velocity_loss-NTuple{4, Any}","page":"Home","title":"SciGenML.Training.compute_velocity_loss","text":"compute_velocity_loss(model, ps, st, (x, y))\n\nCompute the loss for a stochastic interpolant generative model.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Training.get_dataloader","page":"Home","title":"SciGenML.Training.get_dataloader","text":"get_dataloader(\n    base, \n    target, \n    batch_size::Int, \n    match_base_and_target::Bool=false\n)\n\nGet a dataloader from a base and target.\n\n\n\n\n\n","category":"function"},{"location":"#SciGenML.Training.get_dataloader-2","page":"Home","title":"SciGenML.Training.get_dataloader","text":"get_dataloader(\n    data::NamedTuple,\n    batch_size::Int,\n    match_base_and_target::Bool=false\n)\n\nGet a dataloader from a named tuple.\n\n\n\n\n\n","category":"function"},{"location":"#SciGenML.Training.get_dataloader-3","page":"Home","title":"SciGenML.Training.get_dataloader","text":"get_dataloader(\n    base,\n    target,\n    scalar_conditioning,\n    batch_size::Int,\n    match_base_and_target::Bool=false\n)\n\nGet a dataloader from a base, target, and conditioning.\n\n\n\n\n\n","category":"function"},{"location":"#SciGenML.Training.get_gradients-Tuple{Any, Any, Any}","page":"Home","title":"SciGenML.Training.get_gradients","text":"get_gradients(\n    batch,\n    train_state,\n    loss_fn,\n)\n\nGet gradients from a batch, train state, and loss function.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Training.get_interpolated_samples-NTuple{4, Any}","page":"Home","title":"SciGenML.Training.get_interpolated_samples","text":"get_interpolated_samples(\n    base_samples,\n    target_samples,\n    t_samples,\n    interpolant_coefs\n)\n\nGet interpolated samples from a base, target, and time.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Training.get_interpolated_samples-NTuple{5, Any}","page":"Home","title":"SciGenML.Training.get_interpolated_samples","text":"get_interpolated_samples(\n    base_samples,\n    target_samples,\n    z_samples,\n    t_samples,\n    interpolant_coefs\n\n)\n\nGet interpolated samples from a base, target, and time.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Training.get_optimizer-Tuple{String, Any, Any}","page":"Home","title":"SciGenML.Training.get_optimizer","text":"get_optimizer(type::String, lr, lambda)\n\nGet an optimizer from a string.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Training.load_train_state-Tuple{SciGenML.Training.Checkpoint}","page":"Home","title":"SciGenML.Training.load_train_state","text":"load_train_state(\n    checkpoint::Checkpoint\n)\n\nLoad a train state from a checkpoint.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Training.save_train_state-Tuple{Any, Any, SciGenML.Training.Checkpoint}","page":"Home","title":"SciGenML.Training.save_train_state","text":"save_train_state(\n    ps,\n    st,\n    checkpoint::Checkpoint\n)\n\nSave a train state to a checkpoint.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Training.split_data","page":"Home","title":"SciGenML.Training.split_data","text":"split_data(data, split_ratio, rng = Random.default_rng())\n\nSplit data into train and validation sets.\n\n\n\n\n\n","category":"function"},{"location":"#SciGenML.Training.train","page":"Home","title":"SciGenML.Training.train","text":"train(\n    ::Models.Deterministic,\n    model::Models.ScoreBasedDiffusionModel,\n    data,\n    config,\n    rng = Random.default_rng();\n    verbose = true,\n    checkpoint = nothing\n)\n\nTrain a score-based diffusion generative model vis flow matching.\n\n\n\n\n\n","category":"function"},{"location":"#SciGenML.Training.train-2","page":"Home","title":"SciGenML.Training.train","text":"train(\n    ::Models.Deterministic,\n    model::Models.FlowMatching,\n    data,\n    config,\n    rng = Random.default_rng();\n    verbose = true,\n    checkpoint = nothing\n)\n\nTrain a stochastic interpolant generative model.\n\n\n\n\n\n","category":"function"},{"location":"#SciGenML.Training.train-3","page":"Home","title":"SciGenML.Training.train","text":"train(\n    ::Models.Stochastic,\n    model::Models.FollmerStochasticInterpolant,\n    data,\n    config,\n    rng = Random.default_rng();\n    verbose = true,\n    checkpoint = nothing\n)\n\nTrain a Follmer stochastic interpolant generative model.\n\n\n\n\n\n","category":"function"},{"location":"#SciGenML.Training.train-4","page":"Home","title":"SciGenML.Training.train","text":"train(\n    ::Models.Deterministic,\n    model::Models.StochasticInterpolantGenerativeModel,\n    data,\n    config,\n    rng = Random.default_rng();\n    verbose = true,\n    checkpoint = nothing\n)\n\nTrain a stochastic interpolant generative model.\n\n\n\n\n\n","category":"function"},{"location":"#SciGenML.Training.train-5","page":"Home","title":"SciGenML.Training.train","text":"train(\n    ::Models.Stochastic,\n    model::Models.StochasticInterpolantGenerativeModel,\n    data,\n    config,\n    rng = Random.default_rng();\n    verbose = true\n)\n\nTrain a stochastic interpolant generative model.\n\n\n\n\n\n","category":"function"},{"location":"#SciGenML.Training.train-6","page":"Home","title":"SciGenML.Training.train","text":"train(\n    ::Models.Deterministic,\n    model::Models.ConditionalFlowMatching,\n    data,\n    config,\n    rng = Random.default_rng();\n    verbose = true\n)\n\nTrain a stochastic interpolant generative model.\n\n\n\n\n\n","category":"function"},{"location":"#SciGenML.Training.train-Tuple{SciGenML.Models.GenerativeModel, Vararg{Any}}","page":"Home","title":"SciGenML.Training.train","text":"train(\n    model,\n    args...; \n    kwargs...\n)\n\nGeneric training function for all models.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Config.ConditionalFlowMatchingHyperparameters","page":"Home","title":"SciGenML.Config.ConditionalFlowMatchingHyperparameters","text":"ConditionalFlowMatchingHyperparameters\n\nHyperparameters for the conditional flow matching generative model.\n\n\n\n\n\n","category":"type"},{"location":"#SciGenML.Config.DenseNeuralNetworkHyperparameters","page":"Home","title":"SciGenML.Config.DenseNeuralNetworkHyperparameters","text":"DenseNeuralNetworkHyperparameters\n\nHyperparameters for the dense neural network.\n\n\n\n\n\n","category":"type"},{"location":"#SciGenML.Config.FlowMatchingHyperparameters","page":"Home","title":"SciGenML.Config.FlowMatchingHyperparameters","text":"FlowMatchingHyperparameters\n\nHyperparameters for the flow matching generative model.\n\n\n\n\n\n","category":"type"},{"location":"#SciGenML.Config.FollmerStochasticInterpolantHyperparameters","page":"Home","title":"SciGenML.Config.FollmerStochasticInterpolantHyperparameters","text":"FollmerStochasticInterpolantHyperparameters\n\nHyperparameters for the follmer stochastic interpolant generative model.\n\n\n\n\n\n","category":"type"},{"location":"#SciGenML.Config.Hyperparameters","page":"Home","title":"SciGenML.Config.Hyperparameters","text":"Hyperparameters\n\nHyperparameters for the architecture, training, and optimizer.\n\n\n\n\n\n","category":"type"},{"location":"#SciGenML.Config.KNMIDataHyperparameters","page":"Home","title":"SciGenML.Config.KNMIDataHyperparameters","text":"KNMIDataHyperparameters\n\nHyperparameters for the KNMI data.\n\n\n\n\n\n","category":"type"},{"location":"#SciGenML.Config.KolmogorovDataHyperparameters","page":"Home","title":"SciGenML.Config.KolmogorovDataHyperparameters","text":"KolmogorovDataHyperparameters\n\nHyperparameters for the kolmogorov data.\n\n\n\n\n\n","category":"type"},{"location":"#SciGenML.Config.OptimizerHyperparameters","page":"Home","title":"SciGenML.Config.OptimizerHyperparameters","text":"OptimizerHyperparameters\n\nHyperparameters for the optimizer.\n\n\n\n\n\n","category":"type"},{"location":"#SciGenML.Config.PlaceholderDataHyperparameters","page":"Home","title":"SciGenML.Config.PlaceholderDataHyperparameters","text":"PlaceholderDataHyperparameters\n\nHyperparameters for the placeholder.\n\n\n\n\n\n","category":"type"},{"location":"#SciGenML.Config.ScoreBasedDiffusionModelHyperparameters","page":"Home","title":"SciGenML.Config.ScoreBasedDiffusionModelHyperparameters","text":"ScoreBasedDiffusionModelHyperparameters\n\nHyperparameters for the score-based diffusion model generative model.\n\n\n\n\n\n","category":"type"},{"location":"#SciGenML.Config.StochasticInterpolantHyperparameters","page":"Home","title":"SciGenML.Config.StochasticInterpolantHyperparameters","text":"StochasticInterpolantHyperparameters\n\nHyperparameters for the stochastic interpolant generative model.\n\n\n\n\n\n","category":"type"},{"location":"#SciGenML.Config.SuperResKolmogorovDataHyperparameters","page":"Home","title":"SciGenML.Config.SuperResKolmogorovDataHyperparameters","text":"SuperResKolmogorovDataHyperparameters\n\nHyperparameters for the super res kolmogorov data.\n\n\n\n\n\n","category":"type"},{"location":"#SciGenML.Config.TrainingHyperparameters","page":"Home","title":"SciGenML.Config.TrainingHyperparameters","text":"TrainingHyperparameters\n\nHyperparameters for the training.\n\n\n\n\n\n","category":"type"},{"location":"#SciGenML.Config.UNetHyperparameters","page":"Home","title":"SciGenML.Config.UNetHyperparameters","text":"UNetHyperparameters\n\nHyperparameters for the UNet.\n\n\n\n\n\n","category":"type"},{"location":"#SciGenML.Plotting.animate_field-Tuple{Any, Any, Any}","page":"Home","title":"SciGenML.Plotting.animate_field","text":"animate_field(field_list, filename, plot_titles)\n\nAnimate a list of fields.\n\n\n\n\n\n","category":"method"},{"location":"#SciGenML.Plotting.animate_velocity_magitude-Tuple{Any, Any, Any}","page":"Home","title":"SciGenML.Plotting.animate_velocity_magitude","text":"animate_velocity_field(field_list, filename, plot_titles; velocity_channels = (1, 2))\n\nAnimate a list of velocity fields.\n\n\n\n\n\n","category":"method"}]
}
